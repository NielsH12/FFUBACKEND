/*
 * generated by Xtext 2.12.0
 */
package dk.sdu.ffu.pint.scoping

import dk.sdu.ffu.pint.pint.BodyRef
import dk.sdu.ffu.pint.pint.BranchElement
import dk.sdu.ffu.pint.pint.EntityProperty
import dk.sdu.ffu.pint.pint.EntityPropertyRef
import dk.sdu.ffu.pint.pint.EntityRef
import dk.sdu.ffu.pint.pint.PintPackage.Literals
import dk.sdu.ffu.pint.pint.Property
import dk.sdu.ffu.pint.pint.QueryParamRef
import dk.sdu.ffu.pint.pint.RolePolicy
import dk.sdu.ffu.pint.pint.RoleRequire
import dk.sdu.ffu.pint.pint.TreeElement
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import dk.sdu.ffu.pint.pint.EntityPolicy

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class PintScopeProvider extends AbstractPintScopeProvider {

	
	override getScope(EObject context, EReference reference){

		if(context instanceof TreeElement){
			
			var parrent = context.eContainer
			if(parrent instanceof BodyRef){
				var rolePolicy = EcoreUtil2.getContainerOfType(context, RolePolicy);
				var jsonKeyValuePairs = rolePolicy.restResource.httpBody.jsonElements
				return Scopes.scopeFor(jsonKeyValuePairs)
			}
			
			if(parrent instanceof BranchElement){
				var jsonKeyValuePairs = parrent.jsonObjectRef.jsonElements
				return Scopes.scopeFor(jsonKeyValuePairs)
			}
			
		}

		if (context instanceof RoleRequire){
			var rolePolicy = EcoreUtil2.getContainerOfType(context, RolePolicy);
			return Scopes.scopeFor(rolePolicy.restResource.queryParam)
		}

		if (reference == Literals.QUERY_PARAM_REF__REF){
			if(context instanceof QueryParamRef){
				var rolePolicy = EcoreUtil2.getContainerOfType(context, RolePolicy);
				return Scopes.scopeFor(rolePolicy.restResource.queryParam)
			}
		}

		if(context instanceof EntityPropertyRef && reference==Literals.ENTITY_PROPERTY_REF__PROPERTY_REF) { 
			val container = context.eContainer
			
			switch (container) {
				EntityProperty: {
					val entityPolicy = EcoreUtil2.getContainerOfType(container, EntityPolicy)
					return Scopes.scopeFor(entityPolicy.entity.properties)
				}
				EntityPropertyRef:{
					var root =  EcoreUtil2.getRootContainer(container);
					var allProperties = EcoreUtil2.getAllContentsOfType(root, Property)
					
					for(property: allProperties){
						if(property.identityEquals(container.propertyRef)){
							var type = property.type
							switch(type){
								EntityRef: {
									return Scopes.scopeFor(type.ref.properties)
								}
								default: println("Unsupported type: "+ type)
							}
						}
					}
				}
			 	default: println("Unexpected container: "+ container)
			}	
		}
		
		return super.getScope(context, reference)
	}
}
